#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

&mmv_input_listener {
  input-processors = <&zip_xy_scaler 2 1>;
};

&msc_input_listener {
  input-processors = <&zip_scroll_scaler 2 1>;
};

&msc {
  acceleration-exponent = <1>;
  time-to-max-speed-ms = <100>;
  delay-ms = <0>;
};

&mmv {
  time-to-max-speed-ms = <500>;
  acceleration-exponent = <1>;
  trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    hold_mo_1: hold_mo_1 {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <0>;
        flavor = "hold-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo 1 &trans>; // hold = mo(1), tap = do nothing
    };

  keymap {
    compatible = "zmk,keymap";

    layer_ZERO {
      bindings = <
        // Row 1
        &kp ESC &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp UP_ARROW
        &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp BACKSPACE

        // Row 2
        &kp TAB &kp Q &kp W &kp E &kp R &kp T &kp DOWN_ARROW
        &kp Y &kp U &kp I &kp O &kp P &kp BSLH

        // Row 3
        &kp CAPS &kp A &kp S &kp D &kp F &kp G &kp LEFT_ARROW
        &kp H &kp J &kp K &kp L &kp SEMI &kp APOS

        // Row 4
        &kp LSHFT &kp Z &kp X &kp C &kp V &kp B &kp RIGHT_ARROW
        &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp ENTER

        // Row 5 (Thumb cluster)
        &kp C_MUTE &kp LEFT_GUI &kp LEFT_ALT &kp LCTRL &kp ENTER &kp RS(RA(RC(RIGHT_GUI)))
        &kp ENTER &kp ENTER &kp ENTER &mo 1 &kp RCTRL &kp DELETE
      >;
      sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
      display-name = "ZERO";
    };

    layer_ONE {
      bindings = <
        // Row 1
        &kp GRAVE &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &mmv MOVE_UP
        &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F12

        // Row 2
        &trans &kp PG_DN &kp UP &kp PG_UP &trans &trans &trans
        &trans &trans &trans &trans &kp UNDER &kp PLUS

        // Row 3
        &trans &kp LEFT &kp DOWN &kp RIGHT &trans &trans &trans
        &trans &trans &trans &trans &kp LBRC &kp RBRC

        // Row 4
        &trans &rgb_ug RGB_OFF &rgb_ug RGB_ON &rgb_ug RGB_EFF &rgb_ug RGB_EFR &rgb_ug RGB_SPI
        &mmv MOVE_RIGHT &rgb_ug RGB_BRI &rgb_ug RGB_BRD &kp INSERT &to 0 &to 1 &to 2

        // Row 5
        &kp C_MUTE &trans &trans &trans &trans &trans
        &trans &trans &trans &trans &trans &trans
      >;
      display-name = "ONE";
      sensor-bindings = <&scroll_encoder>;
    };

    layer_TWO {
      bindings = <
        // Row 1
        &kp TILDE &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &mmv MOVE_UP
        &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &trans

        // Row 2
        &trans &bt BT_CLR &bt BT_CLR_ALL &trans &trans &trans &mmv MOVE_DOWN
        &trans &trans &kp F11 &kp F12 &trans &trans

        // Row 3
        &trans &out OUT_USB &out OUT_BLE &trans &trans &trans &mmv MOVE_LEFT
        &trans &trans &trans &trans &trans &trans

        // Row 4
        &trans &trans &trans &trans &trans &trans &mmv MOVE_RIGHT
        &trans &trans &trans &to 0 &to 1 &trans

        // Row 5
        &trans &trans &trans &trans &trans &mkp LCLK
        &trans &trans &trans &trans &trans &trans
      >;
      display-name = "TWO";
      sensor-bindings = <&scroll_encoder>;
    };
  };
};
